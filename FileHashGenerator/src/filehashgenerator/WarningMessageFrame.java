/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filehashgenerator;

import javax.swing.SwingWorker;

/**
 *  Creates a Small GUI Window Which is Used
 *  to Alert User of Various Errors that may
 *  occur during the Unique Hash Value 
 *  Generation Process.
 *  
 *  @date       January 20 2020
 *  @author     Tyler Fontana
 *  @version    1.0.0
 */
public class WarningMessageFrame extends javax.swing.JFrame {

    /**
     *  This Constructor Method is Used
     *  in order to create a new Instance of
     *  GUI Window and set the Error Number
     *  Type that caused its creation.
     *  
     *  @param num      The Type of Error /
     *                  Warning that has invoked
     *                  this window's creation.
     */
    public WarningMessageFrame(int num) {
        /**
         *  Populate and Show the Form
         *  within the Window Frame.
         */
        initComponents();
        
        /**
         *  Save the Parameter Value
         *  into a Task Number. This Value
         *  will later be used in Background
         *  Thread Creation.
         */
        this.task = num;
        
        /**
         *  If the Error Type stems from
         *  a Warning Message, display
         *  a Warning Icon within the Form.
         */
        if (task == 0) {
            /**
             *  Set Window Frame Icon.
             */
            setWarningWindowIcon(0);
            /**
             *  Set the GUI Frame's
             *  Title.
             */
            setTitle("Warning Message");
        } 
        /**
         *  If the Error Type stems from
         *  a Error Message, display
         *  a Error Icon within the Form.
         */
        else {
            /**
             *  Set Window Frame Icon.
             */
            setWarningWindowIcon(1);
            /**
             *  Set the GUI Frame's
             *  Title.
             */
            setTitle("Error");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Warning Screen");
        setBackground(new java.awt.Color(153, 153, 153));
        setLocation(new java.awt.Point(450, 294));
        setName("WarningFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(53, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addContainerGap(305, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(15, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(17, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/steelbackground356x112.png"))); // NOI18N
        jLabel3.setToolTipText("");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 114, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  This Method is Invoked Whenever the Window
     *  is Closed or the dispose() method is Called.
     *  It is responsible for Creating and Executing
     *  a Background Event Queue Thread which will
     *  Alter the Main GUI's Form in Representation
     *  of the Error that has occurred.
     * 
     *  @param evt      The Event of the Current Window
     *                  Closing.
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // Execute Background Running Thread.
        new TaskHandler().execute();
    }//GEN-LAST:event_formWindowClosed

    /**
     *  This Method is used in order to change the 
     *  Aesthetical properties of certain components
     *  within the Main GUI Window Form. This is done
     *  in order to emphasize Components which contain
     *  information that caused the current error or
     *  warning invocation.
     */
    public void showUserErrorHashAlgorithmField() {
        /**
         *  Change the Background Color of the Hash Algorithm
         *  Type JComboBoxComponent to Red.
         */
        GUI_ComputeHashValue.setComboBoxBackgroundColor(0);
    }
    
    /**
     *  This method is used in order to Reset the User
     *  Interaction Properties (Enablement Status) of various
     *  Components located within the Main GUI Window Form.
     *  This method is triggered after the closure of the
     *  current warning / error message window.
     */
    public void resetInteractionProperties() {
        /**
         *  Show the Error Message JLabel Component Present
         *  Within the Main GUI Window Form.
         */
        GUI_ComputeHashValue.setErrorMessageVisibility(true);
        //GUI_ComputeHashValue.setLoaderImageTwoVisibility(false);
        /**
         *  Re-Enable the File Selection Components for physical
         *  User Interaction within the Main GUI Window Form.
         */
        GUI_ComputeHashValue.setFileSelectionComponentsEnablement(true);
        /**
         *  Re-Enable the Hash Algorithm Selection Components for physical
         *  User Interaction within the Main GUI Window Form.
         */
        GUI_ComputeHashValue.setHashAlgorithmSelectionComponentsEnablement(true);
    }
    
    /**
     *  This method is used in order to set the Main
     *  GUI Form's Status Error Message display text.
     * 
     *  @param value        A String containing the type
     *                      of Error or Warning that has
     *                      Occurred.
     */
    public static void setMainStatusMessageText(String value) {
        // Set the Main GUI Form Error Message Text
        GUI_ComputeHashValue.setErrorMessageDisplayText(value);
    }
    
    /**
     *  This method is used in order to set the Main
     *  GUI Form's Status Error Message Font Color.
     * 
     *  @param value        An Integer Value Letting
     *                      the Main GUI Form know which
     *                      Font Color to set the Status
     *                      Message Display Text as.
     */
    public static void setMainStatusMessageColor(int value) {
        // Set the Main GUI Form Error Message Font Color
        GUI_ComputeHashValue.setErrorMessageFontColor(value);
    }
    
    /**
     *  This method is used in order to set the
     *  Display Text Message shown on the Current
     *  Warning Message GUI Form.
     * 
     *  @param message      The Error Message That
     *                      will be shown within 
     *                      the window.
     */
    public static void setWarningWindowText(String message) {
        /**
         *  Set the Warning Message Text of
         *  current GUI Form Instance.
         */
        jLabel6.setText(message);
    }
    
    /**
     *  This method is responsible for setting the
     *  Warning Message GUI Window's Icon. Should
     *  the Error Invocation be due to a user error,
     *  a warning icon will be shown. If the error
     *  is caused programmatically, it will instead
     *  show a failure Icon.
     * 
     *  @param value        An Integer Value which
     *                      tells the GUI Window which
     *                      icon to use.
     */
    public void setWarningWindowIcon(int value) {
        /**
         *  If the Parameter Value is 0, then
         *  shown the new Warning Message Screen
         *  with a Warning Icon.
         */
        if (value == 0) {
            /**
             * Set Window Icon.
             */
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/YMIcon75x75.png")));
        }
        /**
         *  If the Parameter Value is 1 or
         *  anything else, then shown the
         *  new Warning Message Screen with
         *  a Failure Icon.
         */
        else {
            /**
             * Set Window Icon.
             */
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/errorIcon.png")));
        }
    }
    
    /**
     *  This method is used to create a new Instance of the
     *  GUI Window and invoke the initComponents Method
     *  which creates the Form and Positions the Components
     *  Contained Within it.
     * 
     *  @param args         Command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Create New Window Instance
                // and Show the Form.
                new WarningMessageFrame(-1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    
    /**
     *  A Variable meant to hold the Error /
     *  Warning Message Type that invoked the
     *  Creation of this window.
     */
    public static int task = -1;
    
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    public class TaskHandler extends SwingWorker<Void,Void> {
        
        /**
         *  This method will be executed once a New Instance
         *  of the TaskHandler Swing Interface is Created and
         *  the execute() method is invoked. The newly created Thread
         *  will execute the Code Block Corresponding with the
         *  Task Number it is Initialized With.
         * 
         *  @return             Returns a Null Value seeing as this
         *                      is a Void Event Queue Thread Execution
         *                      method. The doInBackground() Method
         *                      will never have a different Return Value.
         * 
         *  @throws Exception   Possible Initialization Exception That
         *                      may happen due to Thread Concurrency.
         */
        @Override
        protected Void doInBackground() throws Exception {
            
            /**
             *  Depending on Which type of Error / Warning
             *  Message has cause the creation of this Window
             *  Set the Main GUI Form's Aesthetics / Status
             *  Message Text before re-enabling its user
             *  interaction properties.
             */
            switch (task) {
                /**
                 *  The User hasn't Specified a Valid Hash
                 *  Algorithm before Attempting to Compute
                 *  the Unique Hash Value.
                 *  (Default Hash Algorithm Selection Option)
                 */
                case 0:
                    /**
                     *  Set the Display Text of the Status Message
                     *  JLabel Contained in the Main GUI Window Form.
                     */
                    setMainStatusMessageText("<html><center>Please Select a Valid Hash Algorithm.</center></html>");
                    /**
                     *  Set Main GUI Window Status Message
                     *  Font Color as the Color Yellow.
                     */
                    setMainStatusMessageColor(1);
                    /**
                     *  Change the Hash Type Selection
                     *  Box's Aesthetics in the Main
                     *  GUI Window.
                     */
                    showUserErrorHashAlgorithmField();
                    /**
                     *  Reset the Main GUI Window's User
                     *  Interaction Properties on Window
                     *  Exit.
                     */
                    resetInteractionProperties();
                    /**
                     *  Break From Switch Statement
                     *  and terminate Thread.
                     */
                    break;
                /**
                 *  The User has chosen an Unknown Hash Algorithm
                 *  or a File which is incompatible with the
                 *  currently chosen Hash Algorithm.
                 */
                case 1:
                    /**
                     *  Set the Display Text of the Status Message
                     *  JLabel Contained in the Main GUI Window Form.
                     */
                    setMainStatusMessageText("<html><center>Please Select a Different File or Hash Algorithm.</center></html>");
                    /**
                     *  Set Main GUI Window Status Message
                     *  Font Color as the Color Red.
                     */
                    setMainStatusMessageColor(0);
                    /**
                     *  Reset the Main GUI Window's User
                     *  Interaction Properties on Window
                     *  Exit.
                     */
                    resetInteractionProperties();
                    /**
                     *  Break From Switch Statement
                     *  and terminate Thread.
                     */
                    break;
                /**
                 *  The User has specified a file which
                 *  can no longer be found or was removed
                 *  post selection.
                 */
                case 2:
                    /**
                     *  Set the Display Text of the Status Message
                     *  JLabel Contained in the Main GUI Window Form.
                     */
                    setMainStatusMessageText("<html><center>File Not Found, Please Select a Different File.</center></html>");
                    /**
                     *  Set Main GUI Window Status Message
                     *  Font Color as the Color Red.
                     */
                    setMainStatusMessageColor(0);
                    /**
                     *  Reset the Main GUI Window's User
                     *  Interaction Properties on Window
                     *  Exit.
                     */
                    resetInteractionProperties();
                    /**
                     *  Break From Switch Statement
                     *  and terminate Thread.
                     */
                    break;
                /**
                 *  An unknown error has occurred during the
                 *  execution of the program.
                 */
                case 3:
                    /**
                     *  Set the Display Text of the Status Message
                     *  JLabel Contained in the Main GUI Window Form.
                     */
                    setMainStatusMessageText("<html><center>An Unknown Error has Occurred, Please Try Again Later.</center></html>");
                    /**
                     *  Set Main GUI Window Status Message
                     *  Font Color as the Color Red.
                     */
                    setMainStatusMessageColor(0);
                    /**
                     *  Reset the Main GUI Window's User
                     *  Interaction Properties on Window
                     *  Exit.
                     */
                    resetInteractionProperties();
                    /**
                     *  Break From Switch Statement
                     *  and terminate Thread.
                     */
                    break;
                /**
                 *  Default Switch Condition that is
                 *  never triggered.
                 */
                default:
                    /**
                     *  Break From Switch Statement
                     *  and terminate Thread.
                     */
                    break;
            }
            
            
            /**
             * Return the Required Null
             * Value to Show that the Background
             * Event Queue Thread Has Finished
             * Executing.
             */
            return null;
        }
        
        /**
         * This method is automatically invoked after the
         * doInBackground() method has finished executing.
         */
        @Override
        protected void done() {
            /**
             * Nothing to Do...
             */
        }
    }
}
