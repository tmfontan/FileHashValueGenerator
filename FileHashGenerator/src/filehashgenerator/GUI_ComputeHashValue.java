/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filehashgenerator;

import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;

/**
 *  This Class is responsible for creating the
 *  main GUI Form that is displayed for the user.
 *  This class works in conjunction with the
 *  File Hash Generator Java Class in order to
 *  provide functionality for the GUI Interface.
 * 
 *  @author     Tyler Fontana
 *  @date       January 22, 2021
 *  @version    1.0.0
 */
public class GUI_ComputeHashValue extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI_ComputeHashValue() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hash Generator");
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel7.setOpaque(false);

        jPanel8.setOpaque(false);

        jButton1.setText("Choose File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Compute Hash");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(281, 281, 281))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(291, 291, 291)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(103, Short.MAX_VALUE)))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(304, 304, 304)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(106, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(367, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(182, 182, 182)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(366, Short.MAX_VALUE)))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(332, 332, 332)
                    .addComponent(jButton3)
                    .addContainerGap(224, Short.MAX_VALUE)))
        );

        jButton3.setEnabled(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel7);

        jPanel5.setOpaque(false);

        jPanel6.setOpaque(false);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Please Choose An Option Below:");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.setEnabled(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(119, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(112, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(113, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(104, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(153, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addContainerGap(422, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(384, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(92, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel5);

        jPanel9.setOpaque(false);

        jPanel10.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ---------------------", " MD2", " MD5", " SHA-1", " SHA-224", " SHA-256", " SHA-384", " SHA-512" }));
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Select a Hashing Algorithm:");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("An Unknown Error has Occurred, Please Try Again Later.");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(130, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(119, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(113, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(256, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addGap(115, 115, 115)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(116, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(119, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(112, 112, 112)))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(230, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(312, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(327, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(237, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addGap(293, 293, 293)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(258, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(486, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(60, 60, 60)))
        );

        jComboBox1.setEnabled(false);
        jLabel11.setVisible(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel9);

        jPanel1.setOpaque(false);

        jPanel4.setOpaque(false);

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/FileHashGenerator.png"))); // NOI18N

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("jLabel5");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jLabel6.setOpaque(true);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Loader32x32.gif"))); // NOI18N

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Loader32x32.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(42, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(45, Short.MAX_VALUE)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(117, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(106, 106, 106)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(74, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(450, Short.MAX_VALUE)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(75, 75, 75)
                    .addComponent(jLabel10)
                    .addContainerGap(447, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(19, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addContainerGap(478, Short.MAX_VALUE)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(241, 241, 241)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(311, Short.MAX_VALUE)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(172, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(371, Short.MAX_VALUE)))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(329, 329, 329)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(221, Short.MAX_VALUE)))
        );

        jLabel7.setVisible(false);
        jLabel10.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);

        jPanel2.setOpaque(false);

        jPanel3.setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background469x432.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(44, 44, 44)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(126, 126, 126)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(33, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel11.setOpaque(false);

        jPanel12.setBackground(new java.awt.Color(0, 0, 0));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background554x591.jpg"))); // NOI18N
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 554, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 591, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel11);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  This Action Handler Class is called every time
     *  a user clicks upon the "Choose File" JButton
     *  within the GUI Form. Creates a Separate Thread
     *  which executes the required background tasks
     *  while the main Event Queue Thread focuses on
     *  maintaining the overall look and feel of the
     *  GUI Form.
     * 
     *  @param evt      The user action of clicking the
     *                  "Choose File" JButton Component.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Create and Execute Background Thread.
        new TaskHandler(0).execute();
        // Show Choose File Section Loader GIF Image.
        setLoaderImageOneVisibility(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     *  This Action Handler Class is called every time
     *  a user clicks upon the "Reset" JButton
     *  within the GUI Form. Creates a Separate Thread
     *  which executes the required background tasks
     *  while the main Event Queue Thread focuses on
     *  maintaining the overall look and feel of the
     *  GUI Form.
     * 
     *  @param evt      The user action of clicking the
     *                  "Reset" JButton Component.
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Create and Execute Background Thread.
        new TaskHandler(1).execute();
        // Show Choose File Section Loader GIF Image.
        setLoaderImageOneVisibility(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     *  This Action Handler Class is called every time
     *  a user clicks upon the "Compute Hash" JButton
     *  within the GUI Form. Creates a Separate Thread
     *  which executes the required background tasks
     *  while the main Event Queue Thread focuses on
     *  maintaining the overall look and feel of the
     *  GUI Form.
     * 
     *  @param evt      The user action of clicking the
     *                  "Compute Hash" JButton Component.
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Create and Execute Background Thread.
        new TaskHandler(2).execute();
        // Show Compute Hash Section Loader GIF Image.
        setLoaderImageTwoVisibility(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     *  This method is triggered every time the user selects
     *  a different index within "Hash Function" Selection JComboBox
     *  Component. Creates a Separate Thread which executes the
     *  required background tasks while the main Event Queue
     *  Thread  focuses on maintaining the overall look and
     *  feel of the GUI Form.
     * 
     *  @param evt      The user action of selecting an item in
     *                  the "Hash Function" Selection JComboBox.
     */
    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        // Create and Execute Background Thread.
        new TaskHandler(3).execute();
    }//GEN-LAST:event_jComboBox1MouseClicked

    /**
     *  This method is triggered every time the user clicks
     *  into the "Hash Function" Selection JComboBox. Creates 
     *  a Separate Thread which executes the required background
     *  tasks while the main Event Queue Thread focuses on
     *  maintaining the overall look and feel of the GUI Form.
     * 
     *  @param evt      The user action of clicking into the
     *                  "Hash Algorithm" Selection Box.
     */
    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained
        // Create and Execute Background Thread.
        new TaskHandler(4).execute();
    }//GEN-LAST:event_jComboBox1FocusGained
    
    /**
     *  This method is invoked in order to set the Visibility
     *  Property of the "Choose File" Section Loader Image. It is
     *  invoked whenever the user clicks upon the "Choose File"
     *  or "Reset" JButtons located within the form.
     * 
     *  @param value        The boolean value that determines
     *                      whether or not the Loader GIF Image
     *                      is visible within the form.
     */
    public void setLoaderImageOneVisibility(boolean value) {
        // Set GIF Image Visibility
        jLabel7.setVisible(value);
    }
    
    /**
     *  This method is invoked in order to set the Visibility
     *  Property of the "Compute Hash" Section Loader Image. It is
     *  invoked whenever the user clicks upon the "Compute Hash"
     *  JButton located within the form.
     * 
     *  @param value        The boolean value that determines
     *                      whether or not the Loader GIF Image
     *                      is visible within the form.
     */
    public static void setLoaderImageTwoVisibility(boolean value) {
        // Set GIF Image Visibility
        jLabel10.setVisible(value);
    }
    
    /**
     *  This method is used in order to set the Enablement Property of
     *  all the Components contained within the "Hash Selection" Section
     *  of the Form. When a component is enabled, it means that the user
     *  is able to physically interact with it through actions such as
     *  focus and clicking. If the component is disabled, this means
     *  that it is unable to interacted with by the user. Furthermore,
     *  for the duration of time that a component is disabled, any
     *  changes done to it programmatically will not be visible until
     *  the component is re-enabled.
     * @param value 
     */
    public static void setHashTypeSelectionComponentsEnablement(boolean value) {
        /**
         *  Set enablement property of the
         *  "Hash Selection" JComboBox Component.
         */
        jComboBox1.setEnabled(value);
        /**
         *  Set enablement property of the
         *  "Compute Hash" JButton Component.
         */
        jButton3.setEnabled(value);
    }
    
    /**
     *  This method is used in order to change the display
     *  text value of the "File" JLabel Component. This
     *  Label is only visible once the user has selected
     *  a file via the JFileChooser Pop-Up Window.
     * 
     *  @param value        The String containing the
     *                      Absolute File Path to the
     *                      User's Selected File.
     */
    public void setFileStringPath(String value) {
        // Set the Absolute Path Display Value.
        jLabel3.setText("File: " + value);
    }
    
    /**
     *  This method is used in order to change the background
     *  color of the "Hash Selection" JComboBox Component. This
     *  method is typically invoked whenever the user clicks
     *  into the JComboBox Component or they attempt to Compute
     *  the Hash Value of their chosen file without selecting
     *  a Hash Algorithm type.
     * 
     *  @param value            An integer value that tells the
     *                          method to either set the JComboBox's
     *                          Background color as its Default
     *                          Property or the Color red providing
     *                          that they have invoked an error.
     */
    public static void setComboBoxBackgroundColor(int value) {
        /**
         * If value is zero, set background
         * color as red.
         */
        if (value == 0) {
            // Set Background Color Red.
            jComboBox1.setBackground(Color.red);
        }
        /**
         * Otherwise, set background color as
         * default white color.
         */
        else {
            // Set Background Color White.
            jComboBox1.setBackground(new java.awt.Color(238,238,238));
        }
    }
    
    /**
     *  This method is used in order to set the Display
     *  Text Contained within the Error Message JLabel
     *  located at the bottom of the GUI Form.
     * 
     *  @param value        The String value containing the
     *                      error message to be shown.
     */
    public static void setErrorMessageDisplayText(String value) {
        // Set Error Message Text.
        jLabel11.setText(value);
    }
    
    /**
     *  This method is used in order to set the Status Error 
     *  Message's Font Color. This is done in order to help
     *  the User Designate Between Warning and Error Messages
     *  that have been triggered.
     * 
     *  @param value        An Integer Value which is
     *                      used to determine which color
     *                      the Error Message Font will be.
     *                      
     *                      Possibilities Include:
     *                  
     *                      0   -   Red     "RGB(255, 0, 0)"
     *                      1   -   Yellow  "RGB(255, 255, 0)"
     */
    public static void setErrorMessageFontColor(int value) {
        /**
         *  If the Parameter is a Value of 0, then
         *  set the Error Message Font Color to Red.
         */
        if (value == 0) {
            /**
             *  Set Font Color to Red.
             */
            jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        }
        /**
         *  If the Parameter is a Value of 1, then
         *  set the Error Message Font Color to Yellow.
         */
        else if (value == 1) {
            /**
             *  Set Font Color to Yellow.
             */
            jLabel11.setForeground(new java.awt.Color(255, 255, 0));
        }
    }
    
    /**
     *  This method is used in order to set the Visibility
     *  Property of the Error Status Message JLabel Component
     *  located at the bottom of the form.
     * 
     *  @param value        The boolean value that determines
     *                      whether or not the Error Status
     *                      Message is Visible.
     */
    public static void setErrorMessageVisibility(boolean value) {
        // Set Visibility Property.
        jLabel11.setVisible(value);
    }
    
    /**
     *  This method is used in order to set the Enablement Status
     *  of the "Choose File" & "Reset" JButton Components.
     * 
     * `@param value        The boolean value that determines whether
     *                      or not the two components are enabled
     *                      for user interaction.
     */
    public static void setFileSelectionComponentsEnablement(boolean value) {
        // Set Enablement Status of JButton Component
        jButton1.setEnabled(value);
        // Set Enablement Status of JButton Component
        jButton2.setEnabled(value);
    }
    
    /**
     *  This Method is used in order to set the Enablement Status of
     *  the Hash Algorithm Type Selection Components. This method
     *  affects the "Hash Type" JComboBox and the "Compute Hash"
     *  JButton Components within the form.
     * 
     *  @param value        The boolean value which will determine
     *                      whether or not the two components are
     *                      enabled for user interaction.
     */
    public static void setHashAlgorithmSelectionComponentsEnablement(boolean value) {
        // Set Enablement Status of JComboBox Component
        jComboBox1.setEnabled(value);
        // Set Enablement Status of JButton Component
        jButton3.setEnabled(value);
    }
    
    /**
     *  This method is used in order to set the display text 
     *  value of the "Hash Value" JTextArea Component located
     *  at the bottom of the screen. This method is invoked
     *  whenever the user invokes a Hash Checksum Generation
     *  Process.
     * 
     *  @param value        The String Value Containing the Unique
     *                      File Checksum.
     */
    public void setHashDisplayValue(String value) {
        // Set Display Text of Component.
        jTextArea1.setText(value);
    }
    
    /**
     *  This method is used in order to reset the display text
     *  value of the "Hash Value" JTextArea Component located
     *  at the bottom of the form. This method is typically
     *  invoked whenever the user chooses a new file or changes
     *  some of the previous input data.
     */
    public void resetHashDisplayValue() {
        // Set Display Text of Component.
        jTextArea1.setText("");
    }
    
    /**
     *  This method is used in order to reset the display text
     *  value of the "File Path" JLabel Component located within
     *  the black box in the middle of the form. This method is
     *  typically invoked whenever the user clicks upon the reset
     *  button or chooses a new file to create a Checksum of.
     */
    public void resetFilePathValue() {
        // Set Display Text of Component.
        jLabel3.setText("");
    }
    
    /**
     *  This method is used in order to set the Enablement Status
     *  of the Hash Value Display Components located at the bottom
     *  of the GUI Form. This method affects the "Hash Value" 
     *  JTextArea Component and the JScrollPane Component that it
     *  is encompassed by.
     * 
     *  @param value        A boolean value which determines whether
     *                      or not the two components are enabled
     *                      for user interaction.
     */
    public void setHashDisplayComponentsEnablement(boolean value) {
        // Set Enablement Status of Component.
        jTextArea1.setEnabled(value);
        // Set Enablement Status of Component.
        jScrollPane1.setEnabled(value);
    }
    
    /**
     *  This method is used in order to reset the "Hash Type"
     *  JComboBox Component back to its original default
     *  entry. This method is typically invoked whenever the
     *  user clicks upon the clear button or chooses a
     *  different file.
     */
    public void resetSelectionBox() {
        // Set Default Index of JComboBox.
        jComboBox1.setSelectedIndex(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_ComputeHashValue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_ComputeHashValue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_ComputeHashValue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_ComputeHashValue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_ComputeHashValue().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jButton1;
    public static javax.swing.JButton jButton2;
    public static javax.swing.JButton jButton3;
    public static javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel10;
    public static javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    /**
     *  A Custom Object that will be used to
     *  handle our Hash Calculation Information.
     */
    public HashObject hashObject;
    
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    public class TaskHandler extends SwingWorker<Void,Void> {
        
        // This is a Local Variable Used to
        // Set the Task Number of the Created
        // Thread. This Number will tell the Thread
        // Which Operation to Execute in the
        // doInBackground() Method.
        public int task;
        
        /**
         *  This Constructor is Used to Create a
         *  new TaskHandler Event Queue Thread Object
         *  and set the Task Number which determines
         *  what the new Thread will do.
         * 
         *  @param value        The Integer containing the 
         *                      Task Number which Determines
         *                      the Thread's Execution Role.
         */
        public TaskHandler(int value) {
            // Set the Task Number
            task = value;
        }
        
        /**
         *  This method will be executed once a New Instance
         *  of the TaskHandler Swing Interface is Created and
         *  the execute() method is invoked. The newly created Thread
         *  will execute the Code Block Corresponding with the
         *  Task Number it is Initialized With.
         * 
         *  @return             Returns a Null Value seeing as this
         *                      is a Void Event Queue Thread Execution
         *                      method. The doInBackground() Method
         *                      will never have a different Return Value.
         * 
         *  @throws Exception   Possible Initialization Exception That
         *                      may happen due to Thread Concurrency.
         */
        @Override
        protected Void doInBackground() throws Exception {
            
            /**
             *  New Threads will execute the Switch Condition
             *  Corresponding to the Task Number that they are
             *  Initialized with.
             */
            switch (task) {
                /**
                 *  If the User Clicks Upon the "Choose File"
                 *  JButton Component.
                 */
                case 0:
                    /**
                     *  Disable the two File Selection Components
                     *  until the user has either selected a file
                     *  or exited from the JFileChooser Pop Up Window.
                     */
                    setFileSelectionComponentsEnablement(false);
                    /**
                     *  Reset the Hash Display Value TextArea Component
                     *  in case display text is preset from another
                     *  Hash Calculation Process.
                     */
                    resetHashDisplayValue();
                    /**
                     *  Reset the File Path Display Value in Case one
                     *  is still shown from a previous Hash Calculation.
                     */
                    resetFilePathValue();
                    /**
                     *  Reset the "Hash Type" JComboBox Component to
                     *  its default value in case a different value is
                     *  still selected from a previous process.
                     */
                    resetSelectionBox();
                    /**
                     *  Hide the Error Status Message should it
                     *  be visible from a previous operation.
                     */
                    setErrorMessageVisibility(false);
                    /**
                     *  Disable the File Selection Components until the
                     *  user either chooses a file or exits from the
                     *  JFileChooser Pop-up Window.
                     */
                    setHashTypeSelectionComponentsEnablement(false);
                    /**
                     *  Disable the Hash Value Display Components until
                     *  the user either chooses a file or exits from the
                     *  JFileChooser Pop-up Window.
                     */
                    setHashDisplayComponentsEnablement(false);
                    
                    /**
                     *  Create new JFileChooser Object and display it
                     *  to the user.
                     */
                    JFileChooser chooser = new JFileChooser();
                    /**
                     *  If the User Selects a File within the JFileChooser
                     *  Components and clicks the open button, then execute
                     *  the code block. If a user attempts to click the open
                     *  button without specifying a file, nothing will happen.
                     */
                    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                        /**
                         *  Set the Display Text Value of the File Path JLabel
                         *  Component with the Absolute Path to the File that
                         *  the User has specified.
                         */
                        setFileStringPath(chooser.getSelectedFile().getAbsolutePath());
                        
                        /**
                         *  Initialize the Global Custom HashObject with default property
                         *  values and the File that the user has just chosen.
                         */
                        hashObject = new HashObject(true, "", chooser.getSelectedFile(), "", "");
                        
                        /**
                         *  Re-enable the File Selection Components seeing as the
                         *  User has now specified a File within the Window.
                         */
                        setFileSelectionComponentsEnablement(true);
                        /**
                         *  Re-Enable the Hash Type Selection Components seeing as the
                         *  User has now specified a File within the Window.
                         */
                        setHashTypeSelectionComponentsEnablement(true);
                        /**
                         *  Hide the File Selection Loader GIF Image seeing as the
                         *  User has now specified a File within the Window.
                         */
                        setLoaderImageOneVisibility(false);
                    }
                    /**
                     *  If the user exits from the JFileChooser Pop-Up
                     *  Window without specifying a file, then reset the
                     *  main GUI Form's Selection Components to their
                     *  previous states.
                     */
                    else {
                        /**
                         *  Re-Enable the File Selection Components seeing as the
                         *  User has chosen to exit from JFileChooser Pop-Up Window.
                         */
                        setFileSelectionComponentsEnablement(true);
                        /**
                         *  Hide the File Selection Loader GIF Image seeing as the
                         *  User has chosen to exit from JFileChooser Pop-Up Window.
                         */
                        setLoaderImageOneVisibility(false);
                    }
                    /**
                     *  Break From Switch Condition and Terminate
                     *  the new Thread.
                     */
                    break;
                /**
                 *  If the User Clicks Upon the "Reset"
                 *  JButton Component.
                 */
                case 1:
                    /**
                     *  Disable the File Selection Components until
                     *  the entire form has been reset.
                     */
                    setFileSelectionComponentsEnablement(false);
                    /**
                     *  Reset the Hash Display Value TextArea Component
                     *  in case display text is preset from another
                     *  Hash Calculation Process.
                     */
                    resetHashDisplayValue();
                    /**
                     *  Reset the File Path Display Value in Case one
                     *  is still shown from a previous Hash Calculation.
                     */
                    resetFilePathValue();
                    /**
                     *  Reset the "Hash Type" JComboBox Component to
                     *  its default value in case a different value is
                     *  still selected from a previous process.
                     */
                    resetSelectionBox();
                    /**
                     *  Reset Hash Type Selection Box Background
                     *  Color to Default.
                     */
                    setComboBoxBackgroundColor(1);
                    /**
                     *  Hide the Error Status Message should it
                     *  be visible from a previous operation.
                     */
                    setErrorMessageVisibility(false);
                    /**
                     *  Disable the Hash Type Selection Components
                     *  Seeing as the User has chosen to reset the
                     *  Entire GUI Form. Force Start from the GUI's
                     *  Initial State.
                     */
                    setHashTypeSelectionComponentsEnablement(false);
                    /**
                     *  Disable the Hash Value Display Components
                     *  Seeing as the User has chosen to reset the
                     *  Entire GUI Form. Force Start from the GUI's
                     *  Initial State.
                     */
                    setHashDisplayComponentsEnablement(false);
                    /**
                     *  Disable the File Selection Components until
                     *  the entire form has been reset.
                     */
                    setFileSelectionComponentsEnablement(true);
                    /**
                     *  Hide the Loader Image Seeing as the
                     *  Entire Form has now been reset.
                     */
                    setLoaderImageOneVisibility(false);
                    /**
                     *  Break From Switch Condition and Terminate
                     *  the new Thread.
                     */
                    break;
                /**
                 *  If the User Clicks Upon the "Compute Hash"
                 *  JButton Component.
                 */
                case 2:
                    /**
                     *  Ensure that the Status Error Message located
                     *  at the bottom of the form is invisible should
                     *  it have appeared during a previous Hash
                     *  Calculation Process.
                     */
                    setErrorMessageVisibility(false);
                    /**
                     *  Reset the "Hash Type" JComboBox Background Color
                     *  to its Original Color should it have been colored
                     *  Red during a previous error invocation.
                     */
                    setComboBoxBackgroundColor(1);
                    /**
                     *  Disable the "File Selection" Components Until the
                     *  File's Unique Hash Checksum has been generated
                     *  or an error has occurred.
                     */
                    setFileSelectionComponentsEnablement(false);
                    /**
                     *  Disable the "Hash Type" Components Until the
                     *  File's Unique Hash Checksum has been generated
                     *  or an error has occurred.
                     */
                    setHashAlgorithmSelectionComponentsEnablement(false);
                    
                    /**
                     *  If the User attempts to the Compute the File's
                     *  Unique Hash Value without designating a Hash
                     *  Algorithm Type, then create a Pop-Up Warning
                     *  Message.
                     */
                    if (jComboBox1.getSelectedIndex() == 0) {
                        /**
                         *  Create new Warning Message Pop-up Message
                         *  Instance.
                         */
                        WarningMessageFrame warn = new WarningMessageFrame(0);
                        /**
                         *  Set the Text Displayed within the Warning
                         *  Message GUI Pop-Up Window.
                         */
                        warn.setWarningWindowText("<html><center>Please select a valid Hash Algorithm from the drop down menu before attempting to continue.</center></html>");
                        /**
                         *  Display the new Instance to the User.
                         */
                        warn.setVisible(true);
                        
                        /**
                         *  Hide the Loader Image Associated
                         *  with the Hash Type Selection Components.
                         */
                        setLoaderImageTwoVisibility(false);
                    }
                    else {
                        /**
                         *  Depending on the Selected Index of the
                         *  JComboBox Component, set the Hash Type
                         *  as the Algorithm corresponding with the
                         *  selected index position.
                         */
                        switch (jComboBox1.getSelectedIndex()) {
                            /**
                             *  If the user has selected the algorithm
                             *  at index one, then set the Hash Algorithm
                             *  Type as MD2.
                             */
                            case 1:
                                // Set Hash Algorithm Type
                                hashObject.setHashAlgorithm("MD2");
                                // Break From Switch Statement
                                break;
                            /**
                             *  If the user has selected the algorithm
                             *  at index two, then set the Hash Algorithm
                             *  Type as MD5.
                             */
                            case 2:
                                // Set Hash Algorithm Type
                                hashObject.setHashAlgorithm("MD5");
                                // Break From Switch Statement
                                break;
                            /**
                             *  If the user has selected the algorithm
                             *  at index three, then set the Hash Algorithm
                             *  Type as SHA-1.
                             */
                            case 3:
                                // Set Hash Algorithm Type
                                hashObject.setHashAlgorithm("SHA-1");
                                // Break From Switch Statement
                                break;
                            /**
                             *  If the user has selected the algorithm
                             *  at index four, then set the Hash Algorithm
                             *  Type as SHA-224.
                             */
                            case 4:
                                // Set Hash Algorithm Type
                                hashObject.setHashAlgorithm("SHA-224");
                                // Break From Switch Statement
                                break;
                            /**
                             *  If the user has selected the algorithm
                             *  at index five, then set the Hash Algorithm
                             *  Type as SHA-256.
                             */
                            case 5:
                                // Set Hash Algorithm Type
                                hashObject.setHashAlgorithm("SHA-256");
                                // Break From Switch Statement
                                break;
                            /**
                             *  If the user has selected the algorithm
                             *  at index six, then set the Hash Algorithm
                             *  Type as SHA-384.
                             */
                            case 6:
                                // Set Hash Algorithm Type
                                hashObject.setHashAlgorithm("SHA-384");
                                // Break From Switch Statement
                                break;
                            /**
                             *  If the user has selected the algorithm
                             *  at index seven, then set the Hash Algorithm
                             *  Type as SHA-512.
                             */
                            case 7:
                                // Set Hash Algorithm Type
                                hashObject.setHashAlgorithm("SHA-512");
                                // Break From Switch Statement
                                break;
                            /**
                             *  Default Switch Condition in case
                             *  none of the previous conditions are
                             *  met. --- Never Used ---
                             */
                            default:
                                // Break From Switch Statement
                                break;
                        }
                        
                        /**
                         *  Use the newly created instance of the HashObject Custom
                         *  Object in order to retrieve the Hash Value Generation
                         *  Results from the File Hash Generator Class.
                         */
                        hashObject = new FileHashGenerator().calculateHashValue(hashObject);
                        
                        /**
                         *  If the Overall Result of the Hash Value Calculation
                         *  Process returns a value of false, then it means that
                         *  an error has occurred somewhere during the process.
                         *  Thus, show a customized error pop-up message to the
                         *  user detailing the exact reason that the error 
                         *  has occurred.
                         */
                        if (hashObject.getOperationResult() == false) {
                            
                            /**
                             *  Create a new String Builder Object which will
                             *  be used in order to construct the Error Message
                             *  Displayed in the Warning Message GUI.
                             */
                            StringBuilder message = new StringBuilder();
                            
                            if (hashObject.getExceptionType().contains("NoSuchAlgorithmException")) {
                                /**
                                 *  Create the Display Text For the Warning Message Screen
                                 *  using the String Builder Object.
                                 */
                                message.append("<html><center>The Algorithm ").append(hashObject.getHashAlgorithm())
                                       .append(" either doesn't exist or is incompatible with the specified file. Please "
                                               + "select a different Hash Type or File before Trying Again.</center></html>");

                                /**
                                 *  Create a new Instance of the Warning Message Frame
                                 *  GUI Window using the Error Integer Type as its
                                 *  Parameter.
                                 */
                                WarningMessageFrame warn = new WarningMessageFrame(1);
                                /**
                                 *  Set the Warning Message GUI Window's
                                 *  Display Text.
                                 */
                                warn.setWarningWindowText(message.toString());
                                /**
                                 *  Make the new Pop-Up Screen Instance
                                 *  Visible.
                                 */
                                warn.setVisible(true);

                                /**
                                 * Hide the Loader Image Associated
                                 * with the Hash Type Selection Components.
                                 */
                                setLoaderImageTwoVisibility(false);
                            }
                            else if (hashObject.getExceptionType().contains("FileNotFoundException")) {
                                /**
                                 *  Create the Display Text For the Warning Message Screen
                                 *  using the String Builder Object.
                                 */
                                message.append("<html><center>The File that you previously specified can no longer be found. Please set the path to its new location or select a different file before trying again.</center></html>");

                                /**
                                 *  Create a new Instance of the Warning Message Frame
                                 *  GUI Window using the Error Integer Type as its
                                 *  Parameter.
                                 */
                                WarningMessageFrame warn = new WarningMessageFrame(2);
                                /**
                                 *  Set the Warning Message GUI Window's
                                 *  Display Text.
                                 */
                                warn.setWarningWindowText(message.toString());
                                /**
                                 *  Make the new Pop-Up Screen Instance
                                 *  Visible.
                                 */
                                warn.setVisible(true);

                                /**
                                 * Hide the Loader Image Associated
                                 * with the Hash Type Selection Components.
                                 */
                                setLoaderImageTwoVisibility(false);
                            }
                            else {
                                /**
                                 *  Create the Display Text For the Warning Message Screen
                                 *  using the String Builder Object.
                                 */
                                message.append("<html><center>An Unknown Error has occurred while attempting to produce your file's hash value. Please try again later.</center></html>");

                                /**
                                 *  Create a new Instance of the Warning Message Frame
                                 *  GUI Window using the Error Integer Type as its
                                 *  Parameter.
                                 */
                                WarningMessageFrame warn = new WarningMessageFrame(3);
                                /**
                                 *  Set the Warning Message GUI Window's
                                 *  Display Text.
                                 */
                                warn.setWarningWindowText(message.toString());
                                /**
                                 *  Make the new Pop-Up Screen Instance
                                 *  Visible.
                                 */
                                warn.setVisible(true);

                                /**
                                 * Hide the Loader Image Associated
                                 * with the Hash Type Selection Components.
                                 */
                                setLoaderImageTwoVisibility(false);
                            }
                        }
                        /**
                         *  If the Hash Value Calculation Process has returned
                         *  a value of true, then it means that Hash Calculation
                         *  Process was successful. This means that we can display
                         *  the final result to the user in the GUI Form.
                         */
                        else {
                           /**
                            *   Set the new HEXIDECIMAL Hash Value to All Uppercase
                            *   and display it within the JTextArea Component.
                            */
                           setHashDisplayValue(hashObject.getHashValue().toUpperCase());
                           /**
                            *   Enable the Hash Value Display Components so that
                            *   the user may copy the output text.
                            */
                           setHashDisplayComponentsEnablement(true);
                           /**
                            *   Re-enable the File Selection Components so that
                            *   the User can choose to Hash a new File seeing
                            *   as the process has been completed.
                            */
                           setFileSelectionComponentsEnablement(true);
                           /**
                            *   Re-enable the Hash Algorithm Type Selection
                            *   Components so the user can choose a different
                            *   Hash Algorithm type after the original process
                            *   has finished.
                            */
                           setHashTypeSelectionComponentsEnablement(true);
                           /**
                            *   In case the Loader GIF Image Associated with
                            *   the Hash Type Selection Components is still
                            *   Visible, hide it from the user.
                            */
                           setLoaderImageTwoVisibility(false);
                        }
                    }
                    /**
                     *  Break From Switch Condition and Terminate
                     *  the new Thread.
                     */
                    break;
                /**
                 *  If the User Clicks into the JComboBox
                 *  Component.
                 */
                case 3:
                    /**
                     *  Reset the Hash Display Value TextArea Component
                     *  in case display text is preset from another
                     *  Hash Calculation Process.
                     */
                    resetHashDisplayValue();
                    /**
                     *  Hide the Error Status Message should it
                     *  be visible from a previous operation.
                     */
                    setErrorMessageVisibility(false);
                    /**
                     *  Disable the Hash Display Components seeing as
                     *  the user is selecting a different hashing
                     *  Algorithm.
                     */
                    setHashDisplayComponentsEnablement(false);
                    /**
                     *  In case the Hash Type JComboBox is different
                     *  color from a previous error invocation, change
                     *  its background color back to the default color.
                     */
                    setComboBoxBackgroundColor(1);
                    /**
                     *  Ensure that the Error Status Message JLabel is
                     *  Hidden from the User at the Bottom of the Form.
                     */
                    setErrorMessageVisibility(false);
                    /**
                     *  Break From Switch Condition and Terminate
                     *  the new Thread.
                     */
                    break;
                /**
                 *  Executed Whenever the Hash Type Selection
                 *  JComboBox Component gains Focus within the
                 *  Form.
                 */
                case 4:
                    /**
                     *  Reset the Hash Display Value TextArea Component
                     *  in case display text is preset from another
                     *  Hash Calculation Process.
                     */
                    resetHashDisplayValue();
                    /**
                     *  Disable the Hash Display Components seeing as
                     *  the user is selecting a different hashing
                     *  Algorithm.
                     */
                    setHashDisplayComponentsEnablement(false);
                    /**
                     *  Break From Switch Condition and Terminate
                     *  the new Thread.
                     */
                    break;
                /**
                 *  Default Switch Condition that is
                 *  never triggered.
                 */
                default:
                    /**
                     *  Break From Switch Condition and Terminate
                     *  the new Thread.
                     */
                    break;
            }
            
            return null;
        }
    }
}
